<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="startup" xml:space="preserve">
    <value>// SEGGER Embedded Studio, runtime support.
//
// Copyright (c) 2014-2018 SEGGER Microcontroller GmbH &amp; Co KG
// Copyright (c) 2001-2018 Rowley Associates Limited.
//
// This file may be distributed under the terms of the License Agreement
// provided with this software.
//
// THIS FILE IS PROVIDED AS IS WITH NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

.macro ISR_HANDLER name=
  .section .vectors, "ax"
  .word \name
  .section .init, "ax"
  .thumb_func
  .weak \name
\name:
1: b 1b /* endless loop */
.endm

.macro ISR_RESERVED
  .section .vectors, "ax"
  .word 0
.endm

  .syntax unified
  .global reset_handler

  .section .vectors, "ax"
  .code 16 
  .global _vectors

.macro DEFAULT_ISR_HANDLER name=
  .thumb_func
  .weak \name
\name:
1: b 1b /* endless loop */
.endm

_vectors:
  .word __stack_end__
  .word reset_handler

{IRQS}

  .section .vectors, "ax"
_vectors_end:

  .section .init, "ax"
  .thumb_func

  reset_handler:
  // Check for bootloader configuration. If yes, relocate SCB-&gt;VTOR to __vector_table
  LDR.W    R0, =_vectors     
  CMP      R0,#0                   // Check vector table is at 0x00000000
  BEQ.N    _end_vector_relocation  // If not a 0x00000000 continue initialization
  // relocate vector offset
  LDR.W    R1,=0x1FFFFF80          // AND __vector_table with 0x1FFFFF80         
  ANDS     R0,R0,R1                // AND __vector_table with 0x1FFFFF80
  LDR.W    R1, =0xE000ED08         // Load SCB-&gt;VTOR Address
  STR      R0,[R1]                 // Store new vector table offset

_end_vector_relocation:
#ifndef __NO_SYSTEM_INIT
  ldr r0, =__SRAM_segment_end__
  mov sp, r0
  bl SystemInit
#endif

#if !defined(__SOFTFP__)
  // Enable CP11 and CP10 with CPACR |= (0xf&lt;&lt;20)
  movw r0, 0xED88
  movt r0, 0xE000
  ldr r1, [r0]
  orrs r1, r1, #(0xf &lt;&lt; 20)
  str r1, [r0]
#endif

  b _start

#ifndef __NO_SYSTEM_INIT
  .thumb_func
  .weak SystemInit
SystemInit:
  bx lr
#endif
</value>
  </data>
  <data name="flash_placement_xml" xml:space="preserve">
    <value>&lt;!DOCTYPE Linker_Placement_File&gt;
&lt;Root name="Flash Section Placement"&gt;
  &lt;MemorySegment name="$(FLASH_NAME:FLASH)"&gt;
    &lt;ProgramSection alignment="0x100" load="Yes" name=".vectors" start="$(FLASH_START:)" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".init" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".init_rodata" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".text" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".dtors" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".ctors" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".rodata" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".ARM.exidx" address_symbol="__exidx_start" end_symbol="__exidx_end" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" runin=".fast_run" name=".fast" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" runin=".data_run" name=".data" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" runin=".tdata_run" name=".tdata" /&gt;
  &lt;/MemorySegment&gt;
  &lt;MemorySegment name="$(RAM_NAME:RAM);SRAM"&gt;
    &lt;ProgramSection alignment="0x100" load="No" name=".vectors_ram" start="$(RAM_START:$(SRAM_START:))" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".fast_run" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".data_run" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".bss" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".tbss" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".tdata_run" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".non_init" /&gt;
    &lt;ProgramSection alignment="4" size="__HEAPSIZE__" load="No" name=".heap" /&gt;
    &lt;ProgramSection alignment="8" size="__STACKSIZE__" load="No" place_from_segment_end="No" name=".stack" /&gt;
    &lt;ProgramSection alignment="8" size="__STACKSIZE_PROCESS__" load="No" name=".stack_process" /&gt;
  &lt;/MemorySegment&gt;
  &lt;MemorySegment name="$(FLASH2_NAME:FLASH2)"&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".text2" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".rodata2" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" runin=".data2_run" name=".data2" /&gt;
  &lt;/MemorySegment&gt;
  &lt;MemorySegment name="$(RAM2_NAME:RAM2)"&gt;
    &lt;ProgramSection alignment="4" load="No" name=".data2_run" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".bss2" /&gt;
  &lt;/MemorySegment&gt;
&lt;/Root&gt;
</value>
  </data>
  <data name="ram_placement_xml" xml:space="preserve">
    <value>&lt;!DOCTYPE Linker_Placement_File&gt;
&lt;Root name="RAM Section Placement"&gt;
  &lt;MemorySegment name="$(RAM_NAME:RAM);SRAM"&gt;
    &lt;ProgramSection alignment="0x100" load="Yes" name=".vectors" start="$(RAM_START:$(SRAM_START:))" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".fast" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".init" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".init_rodata" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".text" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".dtors" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".ctors" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".data" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".rodata" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".ARM.exidx" address_symbol="__exidx_start" end_symbol="__exidx_end" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".bss" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".tbss" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".tdata" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".non_init" /&gt;
    &lt;ProgramSection alignment="4" size="__HEAPSIZE__" load="No" name=".heap" /&gt;
    &lt;ProgramSection alignment="8" size="__STACKSIZE__" load="No" place_from_segment_end="No" name=".stack" /&gt;
    &lt;ProgramSection alignment="8" size="__STACKSIZE_PROCESS__" load="No" name=".stack_process" /&gt;
  &lt;/MemorySegment&gt;
  &lt;MemorySegment name="$(RAM2_NAME:RAM2)"&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".text2" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".rodata2" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".data2" /&gt;
    &lt;ProgramSection alignment="4" load="No" name=".bss2" /&gt;
  &lt;/MemorySegment&gt;
  &lt;MemorySegment name="$(ITCM_NAME:ITCM)"&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".text_tcm" /&gt;
  &lt;/MemorySegment&gt;
  &lt;MemorySegment name="$(DTCM_NAME:DTCM)"&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".bss_tcm" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".data_tcm" /&gt;
    &lt;ProgramSection alignment="4" load="Yes" name=".rodata_tcm" /&gt;
  &lt;/MemorySegment&gt;
&lt;/Root&gt;
</value>
  </data>
</root>